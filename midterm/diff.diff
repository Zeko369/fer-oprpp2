diff --git a/hw02/config/workers.properties b/hw02/config/workers.properties
index 5e5c883..4db5f02 100644
--- a/hw02/config/workers.properties
+++ b/hw02/config/workers.properties
@@ -3,3 +3,4 @@
 /calc=hr.fer.zemris.java.webserver.workers.SumWorker
 /index2.html=hr.fer.zemris.java.webserver.workers.HomeWorker
 /bgcolor=hr.fer.zemris.java.webserver.workers.BgColorWorker
+/ispit=hr.fer.zemris.java.webserver.workers.ExamWorker
diff --git a/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/DemoRequestContext.java b/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/DemoRequestContext.java
index fc5ce11..2895e79 100644
--- a/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/DemoRequestContext.java
+++ b/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/DemoRequestContext.java
@@ -30,7 +30,7 @@ public class DemoRequestContext {
 
     private static void demo1(String filePath, String encoding) throws IOException {
         OutputStream os = Files.newOutputStream(Paths.get(filePath));
-        RequestContext rc = new RequestContext(os, new HashMap<>(), new HashMap<>(), new ArrayList<>());
+        RequestContext rc = new RequestContext(null, "GET", os, new HashMap<>(), new HashMap<>(), new ArrayList<>());
 
         rc.setEncoding(encoding);
         rc.setMimeType("text/plain");
@@ -43,7 +43,7 @@ public class DemoRequestContext {
 
     private static void demo2() throws IOException {
         OutputStream os = Files.newOutputStream(Paths.get("primjer3.txt"));
-        RequestContext rc = new RequestContext(os, new HashMap<>(), new HashMap<>(), new ArrayList<>());
+        RequestContext rc = new RequestContext(null, "GET", os, new HashMap<>(), new HashMap<>(), new ArrayList<>());
 
         rc.setEncoding("UTF-8");
         rc.setMimeType("text/plain");
diff --git a/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/EngineDemo.java b/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/EngineDemo.java
index 591da46..77e9f41 100644
--- a/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/EngineDemo.java
+++ b/hw02/src/main/java/hr/fer/zemris/java/custom/scripting/demo/EngineDemo.java
@@ -37,6 +37,8 @@ public class EngineDemo extends BaseDemo {
         List<RequestContext.RCCookie> cookies = new ArrayList<>();
 
         RequestContext rc = new RequestContext(
+                null,
+                "GET",
                 System.out,
                 parameters,
                 persistentParameters,
diff --git a/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPMethod.java b/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPMethod.java
index a8b4722..f496047 100644
--- a/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPMethod.java
+++ b/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPMethod.java
@@ -12,4 +12,6 @@ public class HTTPMethod {
      * The constant GET.
      */
     public static final String GET = "GET";
+
+    public static final String POST = "POST";
 }
diff --git a/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPRequest.java b/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPRequest.java
index da668ce..724c5b6 100644
--- a/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPRequest.java
+++ b/hw02/src/main/java/hr/fer/zemris/java/webserver/HTTP/HTTPRequest.java
@@ -13,7 +13,12 @@ import java.util.*;
  * @author franzekan
  */
 public record HTTPRequest(String version, String urlPath, String queryString, String method,
-                          Map<String, String> headers) {
+                          Map<String, String> headers, String body) {
+    // BACKWARDS COMPATIBILITY
+    public HTTPRequest(String version, String urlPath, String queryString, String method, Map<String, String> headers) {
+        this(version, urlPath, queryString, method, headers, null);
+    }
+
     /**
      * The type Http request exception.
      *
@@ -64,6 +69,11 @@ public record HTTPRequest(String version, String urlPath, String queryString, St
         Map<String, String> query = new HashMap<>();
         Arrays.stream(this.queryString.split("&")).forEach(param -> {
             String[] keyValue = param.split("=");
+            if (keyValue.length != 2) {
+                System.err.println("Expected key and value");
+                return;
+            }
+
             query.put(keyValue[0], keyValue[1]);
         });
 
@@ -118,8 +128,42 @@ public record HTTPRequest(String version, String urlPath, String queryString, St
             headersMap.put(key, value);
         }
 
+        String body = null;
+        if (method.equals(HTTPMethod.POST)) {
+            try {
+                int contentLen = -1;
+//                if (headers.contains("Content-Length")) {
+//                    contentLen = Integer.parseInt(headersMap.get("Content-Length"));
+//                }
+
+                System.out.println("Reading boyd");
+                body = readBody(inputStream, contentLen);
+                System.out.println("read body");
+            } catch (IOException ex) {
+                throw new HTTPRequestException("Error while reading request.");
+            }
+        }
+
+        return new HTTPRequest(version, urlPath, queryString, method, headersMap, body);
+    }
+
+    private static String readBody(InputStream inputStream, int len) throws IOException {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+
+        if (len == -1) {
+            while (inputStream.available() > 0) {
+                byte read = (byte) inputStream.read();
+                if (read == -1) {
+                    break;
+                }
+
+                baos.write(read);
+            }
+        } else {
+            baos.write(inputStream.readNBytes(len));
+        }
 
-        return new HTTPRequest(version, urlPath, queryString, method, headersMap);
+        return baos.toString(StandardCharsets.UTF_8);
     }
 
     private static List<String> readHeaders(String header) {
diff --git a/hw02/src/main/java/hr/fer/zemris/java/webserver/RequestContext.java b/hw02/src/main/java/hr/fer/zemris/java/webserver/RequestContext.java
index 92f02c5..6f9de7d 100644
--- a/hw02/src/main/java/hr/fer/zemris/java/webserver/RequestContext.java
+++ b/hw02/src/main/java/hr/fer/zemris/java/webserver/RequestContext.java
@@ -1,5 +1,6 @@
 package hr.fer.zemris.java.webserver;
 
+import hr.fer.zemris.java.webserver.HTTP.HTTPMethod;
 import hr.fer.zemris.java.webserver.HTTP.HTTPStatus;
 import jdk.jshell.spi.ExecutionControl;
 
@@ -105,6 +106,9 @@ public class RequestContext {
     private final OutputStream outputStream;
     private Charset charset;
 
+    private String method = HTTPMethod.GET;
+    private String body = null; // This should be passed via whole request
+
     private String encoding = "UTF-8";
     // TODO: Migrate to HTTPStatus
 //    private int statusCode = 200;
@@ -156,7 +160,9 @@ public class RequestContext {
      * @param temporaryParameters  the temporary parameters
      * @param dispatcher           the dispatcher
      */
-    public RequestContext(OutputStream outputStream, Map<String, String> parameters, Map<String, String> persistentParameters, List<RCCookie> outputCookies, Map<String, String> temporaryParameters, IDispatcher dispatcher) {
+    public RequestContext(String body, String method, OutputStream outputStream, Map<String, String> parameters, Map<String, String> persistentParameters, List<RCCookie> outputCookies, Map<String, String> temporaryParameters, IDispatcher dispatcher) {
+        this.body = body;
+        this.method = method;
         this.outputStream = Objects.requireNonNull(outputStream);
         this.parameters = parameters == null ? new HashMap<>() : parameters;
         this.persistentParameters = persistentParameters == null ? new HashMap<>() : persistentParameters;
@@ -174,8 +180,8 @@ public class RequestContext {
      * @param persistentParameters the persistent parameters
      * @param outputCookies        the output cookies
      */
-    public RequestContext(OutputStream outputStream, Map<String, String> parameters, Map<String, String> persistentParameters, List<RCCookie> outputCookies) {
-        this(outputStream, parameters, persistentParameters, outputCookies, null, null);
+    public RequestContext(String body, String method, OutputStream outputStream, Map<String, String> parameters, Map<String, String> persistentParameters, List<RCCookie> outputCookies) {
+        this(body, method, outputStream, parameters, persistentParameters, outputCookies, null, null);
     }
 
     private void canChangeHeaders() {
@@ -214,6 +220,14 @@ public class RequestContext {
         return this.customHeaders.get(name);
     }
 
+    public String getMethod() {
+        return this.method;
+    }
+
+    public String getBody() {
+        return this.body;
+    }
+
     /**
      * Sets custom header.
      *
diff --git a/hw02/src/main/java/hr/fer/zemris/java/webserver/SmartHttpServer.java b/hw02/src/main/java/hr/fer/zemris/java/webserver/SmartHttpServer.java
index 578a5e1..95833cf 100644
--- a/hw02/src/main/java/hr/fer/zemris/java/webserver/SmartHttpServer.java
+++ b/hw02/src/main/java/hr/fer/zemris/java/webserver/SmartHttpServer.java
@@ -42,6 +42,7 @@ public class SmartHttpServer {
     private final WorkerLoader workerLoader = new WorkerLoader();
     private final Map<String, IWebWorker> workersMap = new HashMap<>();
     private final Map<String, String> mimeTypes = new HashMap<>();
+    private final static List<String> ALLOWED_HTTP_VERBS = List.of(HTTPMethod.GET, HTTPMethod.POST);
 
     private final Random sessionRandom = new Random();
     private final Map<String, SessionMapEntry> sessions = new ConcurrentHashMap<>();
@@ -179,8 +180,17 @@ public class SmartHttpServer {
                     throw new HTTPError(HTTPStatus.BAD_REQUEST, e.getMessage());
                 }
 
-                if (!this.request.method().equals(HTTPMethod.GET)) {
-                    // FIXME: While technically docs say you should return 400, IMO this should be a 405
+//                if (!this.request.method().equals(HTTPMethod.GET)) {
+//                    // FIXME: While technically docs say you should return 400, IMO this should be a 405
+//                    throw new HTTPError(HTTPStatus.METHOD_NOT_ALLOWED);
+//                }
+
+                if (!ALLOWED_HTTP_VERBS.contains(this.request.method())) {
+                    // this is so we don't break on posting to other paths, but it should be added as default 405
+                    if (this.request.method().equals(HTTPMethod.POST) && !this.request.urlPath().equals("/ispit")) {
+                        throw new HTTPError(HTTPStatus.METHOD_NOT_ALLOWED);
+                    }
+
                     throw new HTTPError(HTTPStatus.METHOD_NOT_ALLOWED);
                 }
 
@@ -289,6 +299,8 @@ public class SmartHttpServer {
             Path requestedPath = Paths.get(String.valueOf(SmartHttpServer.this.documentRoot), urlPath);
             if (this.rc == null) {
                 this.rc = new RequestContext(
+                        this.request.body(),
+                        this.request.method(),
                         this.ostream,
                         this.params,
                         this.permPrams,
diff --git a/hw02/src/main/java/hr/fer/zemris/java/webserver/workers/ExamWorker.java b/hw02/src/main/java/hr/fer/zemris/java/webserver/workers/ExamWorker.java
new file mode 100644
index 0000000..d3254f7
--- /dev/null
+++ b/hw02/src/main/java/hr/fer/zemris/java/webserver/workers/ExamWorker.java
@@ -0,0 +1,41 @@
+package hr.fer.zemris.java.webserver.workers;
+
+import hr.fer.zemris.java.webserver.HTTP.HTTPMethod;
+import hr.fer.zemris.java.webserver.IWebWorker;
+import hr.fer.zemris.java.webserver.RequestContext;
+
+public class ExamWorker implements IWebWorker {
+    @Override
+    public void processRequest(RequestContext context) throws Exception {
+        context.setTemporaryParameter("method", context.getMethod());
+
+        if (context.getMethod().equals(HTTPMethod.GET)) {
+            context.setTemporaryParameter("ime", context.getParameter("ime"));
+            context.setTemporaryParameter("prezime", context.getParameter("prezime"));
+        }
+
+        if (context.getMethod().equals(HTTPMethod.POST)) {
+            String body = context.getBody();
+            if (body == null || body.isEmpty()) {
+                context.setTemporaryParameter("error", "Body is empty!");
+                context.getDispatcher().dispatchRequest("/private/pages/exam.smscr");
+                return;
+            } else {
+                String[] parts = body.split("&");
+                for (String part : parts) {
+                    String[] keyValue = part.split("=");
+                    if (keyValue.length != 2) {
+                        context.setTemporaryParameter("error", "Invalid body!");
+                        continue;
+                    }
+
+                    String key = keyValue[0];
+                    String value = keyValue[1];
+                    context.setTemporaryParameter(key, value);
+                }
+            }
+        }
+
+        context.getDispatcher().dispatchRequest("/private/pages/exam.smscr");
+    }
+}
diff --git a/hw02/webroot/private/pages/exam.smscr b/hw02/webroot/private/pages/exam.smscr
new file mode 100644
index 0000000..6d14f15
--- /dev/null
+++ b/hw02/webroot/private/pages/exam.smscr
@@ -0,0 +1,47 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <meta http-equiv="X-UA-Compatible" content="ie=edge">
+    <title>Exam</title>
+
+    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
+
+    <script>
+        const submitAsGet = () => {
+            document.querySelector('form').method = 'GET';
+            document.querySelector('form').submit();
+        }
+    </script>
+</html>
+<body>
+    <div class="container">
+        <h1>Method: {$= method $}</h1>
+
+        <form method="post" action="/ispit">
+            <div class="form-group mb-2">
+                <label for="ime">Ime:</label>
+                <input type="text" name="ime" value="Pero" class="form-control" id="ime" placeholder="Ime">
+            </div>
+            <div class="form-group mb-2">
+                <label for="prezime">Prezime:</label>
+                <input type="text" name="prezime" value="Perin" class="form-control" id="prezime" placeholder="Prezime">
+            </div>
+
+            <div>
+                <input type="submit" class="btn btn-primary" />
+                <button type="button" onclick="submitAsGet()" class="btn btn-secondary">Submit as get</button>
+            </div>
+        </form>
+
+
+        <pre>{$= "error" "" @tparamGet $}</pre>
+
+        <h2>Data was</h2>
+        <pre>Ime: {$= "ime" "no name submitted" @tparamGet $}</pre>
+        <pre>Prezime: {$= "prezime" "no last name submitted" @tparamGet $}</pre>
+    </div>
+</body>
+</html>
diff --git a/hw03/src/main/java/hr/fer/oprpp2/services/votesDB/VotesDBHandler.java b/hw03/src/main/java/hr/fer/oprpp2/services/votesDB/VotesDBHandler.java
index 9a868a1..6d384c4 100644
--- a/hw03/src/main/java/hr/fer/oprpp2/services/votesDB/VotesDBHandler.java
+++ b/hw03/src/main/java/hr/fer/oprpp2/services/votesDB/VotesDBHandler.java
@@ -66,6 +66,10 @@ public class VotesDBHandler {
      * @param id      the id
      */
     public static void voteFor(ServletRequest request, int id) {
+        VotesDBHandler.voteFor(request, List.of(id));
+    }
+
+    public static void voteFor(ServletRequest request, List<Integer> ids) {
         FileLoader<VoteResult> loader = Loaders.getResultsLoader(request);
         List<VoteResult> results = new ArrayList<>();
 
@@ -78,8 +82,10 @@ public class VotesDBHandler {
             throw new RuntimeException(e);
         }
 
-        if (results.stream().noneMatch(r -> r.id() == id)) {
-            reloadFile = true;
+        for (int id : ids) {
+            if (results.stream().noneMatch(r -> r.id() == id)) {
+                reloadFile = true;
+            }
         }
 
         if (reloadFile) {
@@ -95,8 +101,10 @@ public class VotesDBHandler {
         }
 
         for (VoteResult result : results) {
-            if (result.id() == id) {
-                result.increment();
+            for (int id : ids) {
+                if (result.id() == id) {
+                    result.increment();
+                }
             }
         }
 
@@ -108,4 +116,5 @@ public class VotesDBHandler {
             throw new RuntimeException(e);
         }
     }
+
 }
diff --git a/hw03/src/main/java/hr/fer/oprpp2/servlets/voting/VotingVoteServlet.java b/hw03/src/main/java/hr/fer/oprpp2/servlets/voting/VotingVoteServlet.java
index 5a78b38..13c1ffc 100644
--- a/hw03/src/main/java/hr/fer/oprpp2/servlets/voting/VotingVoteServlet.java
+++ b/hw03/src/main/java/hr/fer/oprpp2/servlets/voting/VotingVoteServlet.java
@@ -9,6 +9,7 @@ import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -44,4 +45,35 @@ public class VotingVoteServlet extends BaseServlet {
 
         resp.sendRedirect("/webapp1/voting/results");
     }
+
+    @Override
+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+        List<VoteOption> voteOptions = VotesDBHandler.loadOptions(req);
+        if (req.getParameterValues("voteIds") != null) {
+            List<Integer> voteIds = new ArrayList<>();
+            for (String id : req.getParameterValues("voteIds")) {
+                int voteId;
+                try {
+                    voteId = Integer.parseInt(id);
+                } catch (NumberFormatException e) {
+                    this.throwError(req, resp, "VoteID is not an integer");
+                    return;
+                }
+
+                int finalVoteId = voteId;
+                if (voteOptions.stream().noneMatch(vo -> vo.id() == finalVoteId)) {
+                    this.throwError(req, resp, String.format("VoteID (%d) is not found", finalVoteId));
+                    return;
+                }
+
+                voteIds.add(voteId);
+            }
+
+            if (!voteIds.isEmpty()) {
+                VotesDBHandler.voteFor(req, voteIds);
+            }
+        }
+
+        resp.sendRedirect("/webapp1/voting/results");
+    }
 }
diff --git a/hw03/src/main/webapp/WEB-INF/pages/voting/votingIndex.jsp b/hw03/src/main/webapp/WEB-INF/pages/voting/votingIndex.jsp
index 176fbe4..586522c 100644
--- a/hw03/src/main/webapp/WEB-INF/pages/voting/votingIndex.jsp
+++ b/hw03/src/main/webapp/WEB-INF/pages/voting/votingIndex.jsp
@@ -13,6 +13,7 @@
     <jsp:include page="/WEB-INF/components/head.jsp">
         <jsp:param name="title" value="Colors"/>
     </jsp:include>
+
 </head>
 <body>
 <jsp:include page="/WEB-INF/components/navbar.jsp">
@@ -23,17 +24,50 @@
     <h1>Vote for your favourite band</h1>
     <p>Clicking on the link will vote</p>
 
-    <ol>
-        <jsp:useBean id="voteOptions" scope="request"
-                     type="java.util.List<hr.fer.oprpp2.services.votesDB.VoteOption>"/>
-        <c:forEach var="voteOption" items="${voteOptions}">
-            <li>
-                <a href="<c:url value="/voting/vote?id=${voteOption.id()}"/>">
-                        ${voteOption.name()}
-                </a>
-            </li>
-        </c:forEach>
-    </ol>
+    <button class="btn-secondary btn btn-sm" onclick="selectAll()">Select all</button>
+
+    <form method="post" action="${pageContext.request.contextPath}/voting/vote">
+        <ol>
+            <jsp:useBean id="voteOptions" scope="request"
+                         type="java.util.List<hr.fer.oprpp2.services.votesDB.VoteOption>"/>
+            <c:forEach var="voteOption" items="${voteOptions}">
+                <li>
+                    <label>
+                        <input type="checkbox" name="voteIds" value="${voteOption.id()}"/>
+                    </label>
+
+                    <a href="<c:url value="/voting/vote?id=${voteOption.id()}"/>">
+                            ${voteOption.name()}
+                    </a>
+                </li>
+            </c:forEach>
+        </ol>
+
+        <input type="submit" value="Vote for 0" class="btn btn-primary"/>
+    </form>
 </div>
+
+<script>
+  const COUNT_ALL = ${voteOptions.size()};
+  const getVotes = () => {
+    return Array.from(document.querySelectorAll('input[type="checkbox"]')).reduce((c, a) => a.checked ? c + 1 : c, 0);
+  }
+
+  const button = document.querySelector('input[type="submit"]');
+  const selectAll = () => {
+    const select = getVotes() !== COUNT_ALL;
+    document.querySelectorAll('input[type="checkbox"]').forEach(input => {
+      input.checked = select;
+    });
+
+    button.value = "Vote for " + getVotes().toString();
+  }
+
+  document.querySelectorAll('input[type="checkbox"]').forEach(input => {
+    input.addEventListener("change", () => {
+      button.value = "Vote for " + getVotes().toString();
+    });
+  });
+</script>
 </body>
 </html>
diff --git a/hw03/src/main/webapp/WEB-INF/voting-results.tsv b/hw03/src/main/webapp/WEB-INF/voting-results.tsv
index 7d17e02..75a5a0f 100644
--- a/hw03/src/main/webapp/WEB-INF/voting-results.tsv
+++ b/hw03/src/main/webapp/WEB-INF/voting-results.tsv
@@ -1,7 +1,7 @@
-1	1
-2	2
-3	14
-4	6
-5	12
-6	2
-7	0
+1	6
+2	4
+3	4
+4	4
+5	4
+6	4
+7	5
